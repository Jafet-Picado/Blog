@model Blog.Models.BlogPost

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>

<div>
    <h4>BlogPost</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Title)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Title)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Content)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Content)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.CreatedAt)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.CreatedAt)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.UpdatedAt)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.UpdatedAt)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Author)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Author.Id)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.CategoryId)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.CategoryId)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.Id">Edit</a> 
    <a asp-action="Index">Back to List</a>
</div>

<h4>Comments</h4>
<form id="commentForm" onsubmit="CreateComment(event)">
    <label for="commentText">Añadir nuevo comentario</label>
    <input type="text" id="commentText" name="commentText" placeholder="Enter your comment" />
    <button type="submit">Submit</button>
</form>

<div id="commentsSection">       

</div>

@section scripts {
    <script>
        function CreateComment(event){
            event.preventDefault();

            var text = document.getElementById('commentText').value;
            var date = new Date().toISOString();
            var userId = 'User.FindFirstValue(ClaimTypes.NameIdentifier)';

            var formData = new FormData();       
            formData.append('Id', 0);
            formData.append('Text', text);            
            formData.append('BlogPostId', @Model?.Id);
            formData.append('AuthorId', userId);
            formData.append('CreatedAt', date);

            var requestData = {
                Id: 0,
                Text: text,
                CreatedAt: date,
                BlogPostId: @Model?.Id,
                AuthorId: userId
            };                    

            fetch('/BlogPosts/CreateComment', {
                method: 'POST',
                //headers: {
                //    'Content-Type': 'application/json'
                //},
                body: formData//JSON.stringify(requestData)
            })
            .then(response => response.json())
            .then(data => {
                fetchComments();             
            })
            .catch(error => {
                console.error('Error creating comment: ',error);
            })

            document.getElementById('commentForm').reset();
        }

        function fetchComments() {
            fetch('/BlogPosts/GetComments?blogPostId=${@Model.Id}')
                .then(response => response.json())
                .then(comments => {
                    const commentsContainer = document.getElementById('commentsSection');
                    commentsContainer.innerHTML = '';
                    
                    comments.forEach(comment => {
                        const commentElement = document.createElement('div');                                                
                        commentElement.innerHTML = `
                                        <div>
                                            <p><a href="#">${comment.AuthorId}}</a></p>
                                            <p>${comment.CreatedAt}</p>
                                        </div>
                                        <div>
                                            <p>${comment.Text}</p>
                                        </div>
                                        `;
                        commentsContainer.appendChild(commentElement);
                    });
                })
                .catch(error => {
                    console.error('Error fetching comments:', error);
                });
        }

        fetchComments();
    </script>
}